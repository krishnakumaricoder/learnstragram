<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LearnStagram - Professional Learning Network</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .gradient-bg { background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 50%, #3b82f6 100%); }
        .login-shadow { box-shadow: 0 25px 50px rgba(30, 58, 138, 0.15); }
        .input-focus:focus { transform: translateY(-2px); transition: all 0.3s ease; }
        .post-shadow { box-shadow: 0 4px 25px rgba(30, 58, 138, 0.08); }
        .comment-animation { animation: slideIn 0.3s ease-out; }
        .nav-icon { transition: all 0.2s ease; }
        .nav-icon:hover { transform: scale(1.1); }
        .notification-item { transition: all 0.3s ease; }
        .notification-item:hover { background-color: #f8fafc; }
        .notification-unread { background-color: #eff6ff; border-left: 4px solid #3b82f6; }
        .notification-pulse { animation: pulse 2s infinite; }
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        .learnstagram-logo {
            background: linear-gradient(135deg, #1e3a8a, #3b82f6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
    </style>
</head>
<body class="min-h-screen bg-slate-50">
    <!-- Login Screen -->
    <div id="loginScreen" class="min-h-screen gradient-bg flex items-center justify-center p-4">
        <!-- Background Pattern -->
        <div class="absolute inset-0 opacity-5">
            <div class="absolute top-10 left-10 w-20 h-20 bg-white rounded-full"></div>
            <div class="absolute top-32 right-20 w-16 h-16 bg-white rounded-full"></div>
            <div class="absolute bottom-20 left-1/4 w-12 h-12 bg-white rounded-full"></div>
            <div class="absolute bottom-32 right-10 w-24 h-24 bg-white rounded-full"></div>
            <div class="absolute top-1/2 left-1/3 w-8 h-8 bg-white rounded-full"></div>
        </div>

        <!-- Login Container -->
        <div class="bg-white rounded-3xl login-shadow w-full max-w-md relative z-10 border border-blue-100">
            <!-- Header -->
            <div class="text-center pt-8 pb-6">
                <div class="gradient-bg w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-4 shadow-lg">
                    <div class="text-white text-3xl font-bold">
                        <span class="text-2xl">L</span>
                    </div>
                </div>
                <h1 class="text-3xl font-bold mb-2">
                    <span class="learnstagram-logo">Learn</span><span class="text-blue-800">stagram</span>
                </h1>
                <p class="text-slate-600 font-medium">Professional Learning Network</p>
            </div>

            <!-- Login/Register Toggle -->
            <div class="px-8 mb-6">
                <div class="flex bg-slate-100 rounded-xl p-1">
                    <button id="loginTab" class="flex-1 py-3 px-4 rounded-lg text-sm font-semibold transition-all bg-white text-blue-800 shadow-sm" onclick="switchTab('login')">
                        Sign In
                    </button>
                    <button id="registerTab" class="flex-1 py-3 px-4 rounded-lg text-sm font-semibold transition-all text-slate-600 hover:text-blue-800" onclick="switchTab('register')">
                        Sign Up
                    </button>
                </div>
            </div>

            <!-- Login Form -->
            <form id="loginForm" class="px-8 pb-8">
                <!-- Success Message -->
                <div id="successMessage" class="hidden mb-4 p-4 bg-blue-50 border border-blue-200 text-blue-800 rounded-xl">
                    <div class="flex items-center">
                        <span class="mr-2">‚úÖ</span>
                        <span id="successText">Login successful! Welcome back!</span>
                    </div>
                </div>

                <!-- Error Message -->
                <div id="errorMessage" class="hidden mb-4 p-4 bg-red-50 border border-red-200 text-red-700 rounded-xl">
                    <div class="flex items-center">
                        <span class="mr-2">‚ùå</span>
                        <span id="errorText">Invalid credentials. Please try again.</span>
                    </div>
                </div>

                <!-- Name Field (Register only) -->
                <div id="nameField" class="hidden mb-6">
                    <label for="fullName" class="block text-sm font-semibold text-slate-700 mb-2">Full Name</label>
                    <div class="relative">
                        <input type="text" id="fullName" name="fullName"
                               class="input-focus w-full px-4 py-3 border-2 border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 bg-white"
                               placeholder="Enter your full name">
                        <span class="absolute right-4 top-3 text-slate-400">üë§</span>
                    </div>
                </div>

                <!-- Email Field -->
                <div class="mb-6">
                    <label for="email" class="block text-sm font-semibold text-slate-700 mb-2">Email Address</label>
                    <div class="relative">
                        <input type="email" id="email" name="email" required
                               class="input-focus w-full px-4 py-3 border-2 border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 bg-white"
                               placeholder="Enter your email">
                        <span class="absolute right-4 top-3 text-slate-400">üìß</span>
                    </div>
                </div>

                <!-- Password Field -->
                <div class="mb-6">
                    <label for="password" class="block text-sm font-semibold text-slate-700 mb-2">Password</label>
                    <div class="relative">
                        <input type="password" id="password" name="password" required
                               class="input-focus w-full px-4 py-3 border-2 border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 bg-white"
                               placeholder="Enter your password">
                        <button type="button" onclick="togglePassword()" class="absolute right-4 top-3 text-slate-400 hover:text-slate-600">
                            <span id="passwordToggle">üëÅÔ∏è</span>
                        </button>
                    </div>
                </div>

                <!-- Role Selection (Register only) -->
                <div id="roleField" class="hidden mb-6">
                    <label class="block text-sm font-semibold text-slate-700 mb-3">I am a:</label>
                    <div class="grid grid-cols-3 gap-3">
                        <label class="flex items-center justify-center p-4 border-2 border-slate-200 rounded-xl cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-all">
                            <input type="radio" name="role" value="student" class="sr-only" onchange="selectRole(this)">
                            <div class="text-center">
                                <div class="text-2xl mb-2">üéì</div>
                                <div class="text-xs font-semibold text-slate-700">Student</div>
                            </div>
                        </label>
                        <label class="flex items-center justify-center p-4 border-2 border-slate-200 rounded-xl cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-all">
                            <input type="radio" name="role" value="teacher" class="sr-only" onchange="selectRole(this)">
                            <div class="text-center">
                                <div class="text-2xl mb-2">üë®‚Äçüè´</div>
                                <div class="text-xs font-semibold text-slate-700">Teacher</div>
                            </div>
                        </label>
                        <label class="flex items-center justify-center p-4 border-2 border-slate-200 rounded-xl cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-all">
                            <input type="radio" name="role" value="admin" class="sr-only" onchange="selectRole(this)">
                            <div class="text-center">
                                <div class="text-2xl mb-2">üëë</div>
                                <div class="text-xs font-semibold text-slate-700">Admin</div>
                            </div>
                        </label>
                    </div>
                </div>

                <!-- Remember Me (Login only) -->
                <div id="rememberField" class="flex items-center justify-between mb-6">
                    <label class="flex items-center">
                        <input type="checkbox" id="remember" class="w-4 h-4 text-blue-600 border-slate-300 rounded focus:ring-blue-500">
                        <span class="ml-2 text-sm text-slate-600 font-medium">Remember me</span>
                    </label>
                    <button type="button" class="text-sm text-blue-600 hover:text-blue-800 transition-colors font-medium">
                        Forgot password?
                    </button>
                </div>

                <!-- Submit Button -->
                <button type="submit" id="submitBtn"
                        class="w-full gradient-bg text-white py-4 rounded-xl font-semibold hover:opacity-90 transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 shadow-lg">
                    <span id="submitBtnText">Sign In</span>
                    <span id="submitSpinner" class="hidden">
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span id="loadingText">Signing in...</span>
                    </span>
                </button>

                <!-- Demo Accounts (Login only) -->
                <div id="demoSection" class="mt-6 p-4 bg-blue-50 rounded-xl border border-blue-200">
                    <h4 class="text-sm font-semibold text-blue-900 mb-3">Try Demo Accounts:</h4>
                    <div class="grid grid-cols-3 gap-2">
                        <button type="button" onclick="fillDemoCredentials('student')" 
                                class="text-xs bg-blue-600 text-white px-3 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium">
                            Student Demo
                        </button>
                        <button type="button" onclick="fillDemoCredentials('teacher')" 
                                class="text-xs bg-blue-700 text-white px-3 py-2 rounded-lg hover:bg-blue-800 transition-colors font-medium">
                            Teacher Demo
                        </button>
                        <button type="button" onclick="fillDemoCredentials('admin')" 
                                class="text-xs bg-blue-800 text-white px-3 py-2 rounded-lg hover:bg-blue-900 transition-colors font-medium">
                            Admin Demo
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Main App Screen -->
    <div id="appScreen" class="hidden bg-slate-50 min-h-screen">
        <!-- Header -->
        <header class="bg-white border-b-2 border-blue-100 sticky top-0 z-50 shadow-sm">
            <div class="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="gradient-bg w-12 h-12 rounded-2xl flex items-center justify-center shadow-lg">
                        <span class="text-white font-bold text-xl">L</span>
                    </div>
                    <h1 class="text-2xl font-bold">
                        <span class="learnstagram-logo">Learn</span><span class="text-blue-800">stagram</span>
                    </h1>
                </div>
                
                <div class="flex-1 max-w-md mx-8">
                    <div class="relative">
                        <input type="text" placeholder="Search professionals, courses, insights..." 
                               class="w-full bg-slate-100 rounded-full py-3 px-4 pl-12 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all border border-slate-200">
                        <svg class="absolute left-4 top-3.5 w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                
                <div class="flex items-center space-x-6">
                    <button class="nav-icon text-slate-600 hover:text-blue-600 transition-colors p-2">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                        </svg>
                    </button>
                    <button class="nav-icon text-slate-600 hover:text-blue-600 transition-colors p-2 relative">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                        </svg>
                        <span class="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">3</span>
                    </button>
                    <button onclick="toggleNotifications()" class="nav-icon text-slate-600 hover:text-blue-600 transition-colors p-2 relative">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM9 7H4l5-5v5zm6 10V7a1 1 0 00-1-1H5a1 1 0 00-1 1v10a1 1 0 001 1h9a1 1 0 001-1z"></path>
                        </svg>
                        <span id="notificationBadge" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">7</span>
                    </button>
                    <div class="relative">
                        <button onclick="toggleUserMenu()" id="userAvatar" class="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all">
                            <span class="text-white text-sm font-semibold" id="userInitials">U</span>
                        </button>
                        <!-- Notifications Panel -->
                        <div id="notificationsPanel" class="hidden absolute right-0 mt-2 w-96 bg-white rounded-xl shadow-xl border border-slate-200 py-2 z-50">
                            <div class="px-4 py-3 border-b border-slate-100 flex items-center justify-between">
                                <h3 class="font-bold text-slate-900">Notifications</h3>
                                <button onclick="markAllAsRead()" class="text-sm text-blue-600 hover:text-blue-800 font-medium">Mark all read</button>
                            </div>
                            <div id="notificationsList" class="max-h-96 overflow-y-auto">
                                <!-- Notifications will be populated here -->
                            </div>
                            <div class="px-4 py-3 border-t border-slate-100 text-center">
                                <button class="text-sm text-blue-600 hover:text-blue-800 font-medium">View all notifications</button>
                            </div>
                        </div>
                        
                        <!-- User Menu -->
                        <div id="userMenu" class="hidden absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-xl border border-slate-200 py-2">
                            <div class="px-4 py-3 border-b border-slate-100">
                                <p class="font-semibold text-slate-900" id="userNameDisplay">User Name</p>
                                <p class="text-sm text-slate-500" id="userEmailDisplay">user@email.com</p>
                                <p class="text-xs text-blue-600 font-medium" id="userRoleDisplay">Student</p>
                            </div>
                            <button onclick="showProfile()" class="w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 flex items-center">
                                <span class="mr-3">üë§</span> Profile
                            </button>
                            <button onclick="showSettings()" class="w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 flex items-center">
                                <span class="mr-3">‚öôÔ∏è</span> Settings
                            </button>
                            <button onclick="logout()" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center">
                                <span class="mr-3">üö™</span> Logout
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <div class="max-w-6xl mx-auto px-4 py-6 flex gap-8">
            <!-- Sidebar -->
            <aside class="w-64 hidden lg:block">
                <div class="bg-white rounded-2xl p-6 post-shadow mb-6 border border-slate-100">
                    <h3 class="font-bold text-slate-900 mb-4 text-lg">Professional Fields</h3>
                    <div class="space-y-2">
                        <button class="w-full text-left px-4 py-3 rounded-xl hover:bg-blue-50 text-slate-700 hover:text-blue-700 transition-all flex items-center">
                            <span class="mr-3">üíº</span> Business & Finance
                        </button>
                        <button class="w-full text-left px-4 py-3 rounded-xl hover:bg-blue-50 text-slate-700 hover:text-blue-700 transition-all flex items-center">
                            <span class="mr-3">üíª</span> Technology & AI
                        </button>
                        <button class="w-full text-left px-4 py-3 rounded-xl hover:bg-blue-50 text-slate-700 hover:text-blue-700 transition-all flex items-center">
                            <span class="mr-3">üè•</span> Healthcare
                        </button>
                        <button class="w-full text-left px-4 py-3 rounded-xl hover:bg-blue-50 text-slate-700 hover:text-blue-700 transition-all flex items-center">
                            <span class="mr-3">‚öñÔ∏è</span> Legal & Compliance
                        </button>
                        <button class="w-full text-left px-4 py-3 rounded-xl hover:bg-blue-50 text-slate-700 hover:text-blue-700 transition-all flex items-center">
                            <span class="mr-3">üìà</span> Marketing & Sales
                        </button>
                    </div>
                </div>
                
                <div class="bg-white rounded-2xl p-6 post-shadow border border-slate-100">
                    <h3 class="font-bold text-slate-900 mb-4 text-lg">Trending Topics</h3>
                    <div class="space-y-2">
                        <span class="inline-block bg-blue-100 text-blue-800 px-3 py-2 rounded-full text-sm font-medium mr-2 mb-2">#DigitalTransformation</span>
                        <span class="inline-block bg-slate-100 text-slate-800 px-3 py-2 rounded-full text-sm font-medium mr-2 mb-2">#Leadership</span>
                        <span class="inline-block bg-blue-100 text-blue-800 px-3 py-2 rounded-full text-sm font-medium mr-2 mb-2">#DataScience</span>
                        <span class="inline-block bg-slate-100 text-slate-800 px-3 py-2 rounded-full text-sm font-medium mr-2 mb-2">#Innovation</span>
                        <span class="inline-block bg-blue-100 text-blue-800 px-3 py-2 rounded-full text-sm font-medium mr-2 mb-2">#RemoteWork</span>
                    </div>
                </div>
            </aside>

            <!-- Main Content -->
            <main class="flex-1 max-w-2xl">
                <!-- Welcome Message -->
                <div class="gradient-bg rounded-2xl p-6 text-white mb-6 shadow-lg">
                    <h2 class="text-2xl font-bold mb-2" id="welcomeMessage">Welcome to LearnStagram!</h2>
                    <p class="opacity-90 font-medium" id="welcomeSubtext">Connect with professionals and grow your career</p>
                </div>

                <!-- Create Post -->
                <div class="bg-white rounded-2xl p-6 post-shadow mb-6 border border-slate-100">
                    <div class="flex items-center space-x-4 mb-4">
                        <div id="createPostAvatar" class="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center shadow-lg">
                            <span class="text-white font-semibold" id="createPostInitials">U</span>
                        </div>
                        <input type="text" placeholder="Share your professional insights..." 
                               class="flex-1 bg-slate-100 rounded-full py-3 px-6 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all border border-slate-200"
                               onclick="openCreatePost()">
                    </div>
                    <div class="flex justify-between items-center">
                        <div class="flex space-x-6">
                            <button class="flex items-center space-x-2 text-slate-600 hover:text-blue-600 transition-colors">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                <span class="text-sm font-medium">Photo</span>
                            </button>
                            <button class="flex items-center space-x-2 text-slate-600 hover:text-blue-600 transition-colors">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                                </svg>
                                <span class="text-sm font-medium">Poll</span>
                            </button>
                            <button class="flex items-center space-x-2 text-slate-600 hover:text-blue-600 transition-colors">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                </svg>
                                <span class="text-sm font-medium">Video</span>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Sample Posts -->
                <div class="space-y-6">
                    <!-- Post 1 -->
                    <article class="bg-white rounded-2xl post-shadow overflow-hidden border border-slate-100" data-post-id="post-1">
                        <div class="p-6 flex items-center justify-between">
                            <div class="flex items-center space-x-4">
                                <div class="w-12 h-12 bg-blue-700 rounded-full flex items-center justify-center shadow-lg">
                                    <span class="text-white font-bold">DS</span>
                                </div>
                                <div>
                                    <h4 class="font-bold text-slate-900">Dr. Sarah Chen</h4>
                                    <p class="text-sm text-slate-500 font-medium">Data Science Director ‚Ä¢ 3h ago</p>
                                </div>
                            </div>
                            <button class="text-slate-400 hover:text-slate-600 p-2">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"></path>
                                </svg>
                            </button>
                        </div>
                        
                        <div class="px-6 pb-4">
                            <p class="text-slate-800 mb-4 leading-relaxed">Excited to share our latest breakthrough in AI-driven predictive analytics! Our new machine learning model has achieved 94% accuracy in forecasting market trends, helping businesses make data-driven decisions with unprecedented confidence. üöÄüìä</p>
                            <div class="flex flex-wrap gap-2 mb-4">
                                <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-semibold">#DataScience</span>
                                <span class="bg-slate-100 text-slate-800 px-3 py-1 rounded-full text-sm font-semibold">#MachineLearning</span>
                                <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-semibold">#Innovation</span>
                            </div>
                        </div>
                        
                        <div class="bg-gradient-to-br from-blue-50 via-slate-50 to-blue-100 h-72 flex items-center justify-center border-t border-b border-slate-100">
                            <div class="text-center">
                                <div class="text-7xl mb-4">üìä</div>
                                <p class="text-slate-800 font-bold text-xl mb-2">AI Analytics Dashboard</p>
                                <p class="text-slate-600 font-medium">Real-time Market Predictions & Insights</p>
                            </div>
                        </div>
                        
                        <div class="p-6">
                            <div class="flex items-center justify-between mb-4">
                                <div class="flex space-x-8">
                                    <button class="flex items-center space-x-2 text-slate-600 hover:text-red-500 transition-colors like-btn" onclick="toggleLike(this)">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                                        </svg>
                                        <span class="text-sm font-semibold like-count">247</span>
                                    </button>
                                    <button class="flex items-center space-x-2 text-slate-600 hover:text-blue-500 transition-colors comment-btn" onclick="toggleComments(this)">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                                        </svg>
                                        <span class="text-sm font-semibold comment-count">18</span>
                                    </button>
                                    <button class="flex items-center space-x-2 text-slate-600 hover:text-green-500 transition-colors">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                                        </svg>
                                        <span class="text-sm font-semibold">Share</span>
                                    </button>
                                </div>
                                <button class="text-slate-600 hover:text-blue-500 transition-colors bookmark-btn" onclick="toggleBookmark(this)">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
                                    </svg>
                                </button>
                            </div>
                            
                            <!-- Comments Section -->
                            <div class="comments-expanded hidden">
                                <div class="border-t border-slate-100 pt-4 mb-4">
                                    <div class="comments-section space-y-4 mb-4">
                                        <!-- Comments will be rendered here -->
                                    </div>
                                </div>
                            </div>
                            
                            <div class="border-t border-slate-100 pt-4">
                                <div class="flex items-center space-x-3">
                                    <div id="commentAvatar1" class="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center shadow-lg">
                                        <span class="text-white text-sm font-semibold">U</span>
                                    </div>
                                    <input type="text" placeholder="Share your professional thoughts..." 
                                           class="flex-1 bg-slate-100 rounded-full py-3 px-4 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all border border-slate-200 comment-input">
                                    <button class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-full text-sm font-semibold transition-colors shadow-lg" onclick="submitComment(this)">
                                        Post
                                    </button>
                                </div>
                            </div>
                        </div>
                    </article>
                </div>
            </main>

            <!-- Right Sidebar -->
            <aside class="w-80 hidden xl:block">
                <div class="bg-white rounded-2xl p-6 post-shadow mb-6 border border-slate-100">
                    <h3 class="font-bold text-slate-900 mb-4 text-lg">Online Professionals</h3>
                    <div id="onlineUsers" class="space-y-4">
                        <!-- Online users will be populated here -->
                    </div>
                </div>
                
                <div class="bg-white rounded-2xl p-6 post-shadow border border-slate-100">
                    <h3 class="font-bold text-slate-900 mb-4 text-lg">Professional Networks</h3>
                    <div class="space-y-4">
                        <div class="p-4 bg-blue-50 rounded-xl border border-blue-200">
                            <h4 class="font-bold text-blue-900">Data Science Professionals</h4>
                            <p class="text-sm text-blue-700 mb-2 font-medium">2,847 members</p>
                            <div class="flex items-center space-x-2">
                                <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                                <span class="text-xs text-slate-600 font-medium">124 active now</span>
                            </div>
                        </div>
                        <div class="p-4 bg-slate-50 rounded-xl border border-slate-200">
                            <h4 class="font-bold text-slate-900">Tech Leadership Forum</h4>
                            <p class="text-sm text-slate-700 mb-2 font-medium">1,563 members</p>
                            <div class="flex items-center space-x-2">
                                <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                                <span class="text-xs text-slate-600 font-medium">89 active now</span>
                            </div>
                        </div>
                        <div class="p-4 bg-blue-50 rounded-xl border border-blue-200">
                            <h4 class="font-bold text-blue-900">Digital Marketing Hub</h4>
                            <p class="text-sm text-blue-700 mb-2 font-medium">987 members</p>
                            <div class="flex items-center space-x-2">
                                <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                                <span class="text-xs text-slate-600 font-medium">45 active now</span>
                            </div>
                        </div>
                    </div>
                </div>
            </aside>
        </div>
    </div>

    <script>
        // User Management System
        class UserManager {
            constructor() {
                this.users = this.loadUsers();
                this.currentUser = this.loadCurrentUser();
                this.initializeApp();
            }

            loadUsers() {
                const stored = localStorage.getItem('learnstagramUsers');
                if (stored) {
                    return JSON.parse(stored);
                }
                
                // Initialize with demo accounts
                const defaultUsers = {
                    'student@demo.com': {
                        id: 'user_1',
                        email: 'student@demo.com',
                        password: 'demo123',
                        name: 'Alex Johnson',
                        role: 'student',
                        avatar: 'AJ',
                        joinDate: new Date().toISOString(),
                        isOnline: false
                    },
                    'teacher@demo.com': {
                        id: 'user_2',
                        email: 'teacher@demo.com',
                        password: 'demo123',
                        name: 'Dr. Sarah Smith',
                        role: 'teacher',
                        avatar: 'DS',
                        joinDate: new Date().toISOString(),
                        isOnline: false
                    },
                    'admin@demo.com': {
                        id: 'user_3',
                        email: 'admin@demo.com',
                        password: 'demo123',
                        name: 'Michael Chen',
                        role: 'admin',
                        avatar: 'MC',
                        joinDate: new Date().toISOString(),
                        isOnline: false
                    }
                };
                
                this.saveUsers(defaultUsers);
                return defaultUsers;
            }

            saveUsers(users = this.users) {
                localStorage.setItem('learnstagramUsers', JSON.stringify(users));
            }

            loadCurrentUser() {
                const stored = localStorage.getItem('learnstagramCurrentUser');
                return stored ? JSON.parse(stored) : null;
            }

            saveCurrentUser(user) {
                localStorage.setItem('learnstagramCurrentUser', JSON.stringify(user));
                this.currentUser = user;
            }

            generateUserId() {
                return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }

            generateAvatar(name) {
                const names = name.trim().split(' ');
                if (names.length >= 2) {
                    return names[0][0].toUpperCase() + names[1][0].toUpperCase();
                }
                return names[0].substring(0, 2).toUpperCase();
            }

            emailExists(email) {
                return this.users.hasOwnProperty(email.toLowerCase());
            }

            register(userData) {
                const email = userData.email.toLowerCase();
                
                if (this.emailExists(email)) {
                    throw new Error('An account with this email already exists. Please sign in instead.');
                }

                const newUser = {
                    id: this.generateUserId(),
                    email: email,
                    password: userData.password,
                    name: userData.name,
                    role: userData.role,
                    avatar: this.generateAvatar(userData.name),
                    joinDate: new Date().toISOString(),
                    isOnline: true
                };

                this.users[email] = newUser;
                this.saveUsers();
                this.saveCurrentUser(newUser);
                
                return newUser;
            }

            login(email, password) {
                const userEmail = email.toLowerCase();
                const user = this.users[userEmail];
                
                if (!user) {
                    throw new Error('No account found with this email address.');
                }
                
                if (user.password !== password) {
                    throw new Error('Incorrect password. Please try again.');
                }

                user.isOnline = true;
                user.lastLogin = new Date().toISOString();
                this.saveUsers();
                this.saveCurrentUser(user);
                
                return user;
            }

            logout() {
                if (this.currentUser) {
                    this.users[this.currentUser.email].isOnline = false;
                    this.saveUsers();
                }
                
                localStorage.removeItem('learnstagramCurrentUser');
                this.currentUser = null;
            }

            initializeApp() {
                if (this.currentUser) {
                    this.showApp();
                } else {
                    this.showLogin();
                }
            }

            showLogin() {
                document.getElementById('loginScreen').classList.remove('hidden');
                document.getElementById('appScreen').classList.add('hidden');
            }

            showApp() {
                document.getElementById('loginScreen').classList.add('hidden');
                document.getElementById('appScreen').classList.remove('hidden');
                this.updateUserInterface();
                this.updateOnlineUsers();
            }

            updateUserInterface() {
                if (!this.currentUser) return;

                const user = this.currentUser;
                
                // Update user avatar and initials
                document.getElementById('userInitials').textContent = user.avatar;
                document.getElementById('createPostInitials').textContent = user.avatar;
                document.getElementById('commentAvatar1').querySelector('span').textContent = user.avatar;
                
                // Update user menu
                document.getElementById('userNameDisplay').textContent = user.name;
                document.getElementById('userEmailDisplay').textContent = user.email;
                document.getElementById('userRoleDisplay').textContent = user.role.charAt(0).toUpperCase() + user.role.slice(1);
                
                // Update welcome message
                document.getElementById('welcomeMessage').textContent = `Welcome back, ${user.name.split(' ')[0]}! üëã`;
                document.getElementById('welcomeSubtext').textContent = `Continue your professional growth as a ${user.role}`;
                
                // Set avatar colors based on role
                const avatarColor = {
                    'student': 'bg-blue-600',
                    'teacher': 'bg-blue-700',
                    'admin': 'bg-blue-800'
                }[user.role] || 'bg-slate-600';
                
                document.getElementById('userAvatar').className = `w-10 h-10 ${avatarColor} rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all`;
                document.getElementById('createPostAvatar').className = `w-12 h-12 ${avatarColor} rounded-full flex items-center justify-center shadow-lg`;
                document.getElementById('commentAvatar1').className = `w-10 h-10 ${avatarColor} rounded-full flex items-center justify-center shadow-lg`;
            }

            updateOnlineUsers() {
                const onlineUsersContainer = document.getElementById('onlineUsers');
                const onlineUsers = Object.values(this.users).filter(user => 
                    user.isOnline && user.email !== this.currentUser?.email
                );
                
                if (onlineUsers.length === 0) {
                    onlineUsersContainer.innerHTML = '<p class="text-slate-500 text-sm font-medium">No other professionals online</p>';
                    return;
                }
                
                onlineUsersContainer.innerHTML = onlineUsers.map(user => {
                    const avatarColor = {
                        'student': 'bg-blue-600',
                        'teacher': 'bg-blue-700',
                        'admin': 'bg-blue-800'
                    }[user.role] || 'bg-slate-600';
                    
                    return `
                        <div class="flex items-center space-x-3">
                            <div class="relative">
                                <div class="w-10 h-10 ${avatarColor} rounded-full flex items-center justify-center shadow-lg">
                                    <span class="text-white text-sm font-semibold">${user.avatar}</span>
                                </div>
                                <div class="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 border-2 border-white rounded-full"></div>
                            </div>
                            <div>
                                <p class="font-semibold text-slate-900 text-sm">${user.name}</p>
                                <p class="text-xs text-slate-500 font-medium">${user.role.charAt(0).toUpperCase() + user.role.slice(1)}</p>
                            </div>
                        </div>
                    `;
                }).join('');
            }
        }

        // Notification System
        class NotificationManager {
            constructor() {
                this.notifications = this.loadNotifications();
                this.initializeNotifications();
            }

            loadNotifications() {
                const stored = localStorage.getItem('learnstagramNotifications');
                if (stored) {
                    return JSON.parse(stored);
                }
                
                // Initialize with sample notifications
                const defaultNotifications = [
                    {
                        id: 'notif_1',
                        type: 'like',
                        title: 'Dr. Sarah Chen liked your post',
                        message: 'Your post about "Digital Marketing Trends" received a like',
                        timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
                        isRead: false,
                        avatar: 'SC',
                        avatarColor: 'bg-blue-700'
                    },
                    {
                        id: 'notif_2',
                        type: 'comment',
                        title: 'Michael Chen commented on your post',
                        message: 'Great insights on AI implementation strategies!',
                        timestamp: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
                        isRead: false,
                        avatar: 'MC',
                        avatarColor: 'bg-blue-800'
                    },
                    {
                        id: 'notif_3',
                        type: 'follow',
                        title: 'Alex Johnson started following you',
                        message: 'You have a new professional connection',
                        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
                        isRead: false,
                        avatar: 'AJ',
                        avatarColor: 'bg-blue-600'
                    },
                    {
                        id: 'notif_4',
                        type: 'mention',
                        title: 'You were mentioned in a post',
                        message: 'Dr. Sarah Chen mentioned you in a discussion about data science',
                        timestamp: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
                        isRead: true,
                        avatar: 'SC',
                        avatarColor: 'bg-blue-700'
                    },
                    {
                        id: 'notif_5',
                        type: 'achievement',
                        title: 'Congratulations! Profile milestone reached',
                        message: 'Your profile has reached 100 professional connections',
                        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                        isRead: true,
                        avatar: 'üèÜ',
                        avatarColor: 'bg-yellow-500'
                    },
                    {
                        id: 'notif_6',
                        type: 'course',
                        title: 'New course recommendation',
                        message: 'Advanced Data Analytics course matches your interests',
                        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
                        isRead: false,
                        avatar: 'üìö',
                        avatarColor: 'bg-green-600'
                    },
                    {
                        id: 'notif_7',
                        type: 'event',
                        title: 'Upcoming webinar reminder',
                        message: 'AI in Healthcare webinar starts in 2 hours',
                        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
                        isRead: false,
                        avatar: 'üìÖ',
                        avatarColor: 'bg-purple-600'
                    }
                ];
                
                this.saveNotifications(defaultNotifications);
                return defaultNotifications;
            }

            saveNotifications(notifications = this.notifications) {
                localStorage.setItem('learnstagramNotifications', JSON.stringify(notifications));
            }

            initializeNotifications() {
                this.updateNotificationBadge();
                this.renderNotifications();
                this.startLiveUpdates();
            }

            updateNotificationBadge() {
                const unreadCount = this.notifications.filter(n => !n.isRead).length;
                const badge = document.getElementById('notificationBadge');
                
                if (unreadCount > 0) {
                    badge.textContent = unreadCount > 99 ? '99+' : unreadCount;
                    badge.classList.remove('hidden');
                    badge.classList.add('notification-pulse');
                } else {
                    badge.classList.add('hidden');
                    badge.classList.remove('notification-pulse');
                }
            }

            renderNotifications() {
                const container = document.getElementById('notificationsList');
                
                if (this.notifications.length === 0) {
                    container.innerHTML = `
                        <div class="px-4 py-8 text-center">
                            <div class="text-4xl mb-2">üîî</div>
                            <p class="text-slate-500 font-medium">No notifications yet</p>
                        </div>
                    `;
                    return;
                }
                
                container.innerHTML = this.notifications.map(notification => {
                    const timeAgo = this.getTimeAgo(notification.timestamp);
                    const iconMap = {
                        'like': '‚ù§Ô∏è',
                        'comment': 'üí¨',
                        'follow': 'üë•',
                        'mention': 'üì¢',
                        'achievement': 'üèÜ',
                        'course': 'üìö',
                        'event': 'üìÖ'
                    };
                    
                    return `
                        <div class="notification-item px-4 py-3 cursor-pointer ${!notification.isRead ? 'notification-unread' : ''}" 
                             onclick="markAsRead('${notification.id}')">
                            <div class="flex items-start space-x-3">
                                <div class="relative">
                                    <div class="w-10 h-10 ${notification.avatarColor} rounded-full flex items-center justify-center shadow-lg">
                                        <span class="text-white text-sm font-semibold">${notification.avatar}</span>
                                    </div>
                                    <div class="absolute -bottom-1 -right-1 w-5 h-5 bg-white rounded-full flex items-center justify-center">
                                        <span class="text-xs">${iconMap[notification.type] || 'üì¢'}</span>
                                    </div>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="font-semibold text-slate-900 text-sm">${notification.title}</p>
                                    <p class="text-sm text-slate-600 mt-1">${notification.message}</p>
                                    <p class="text-xs text-slate-400 mt-2 font-medium">${timeAgo}</p>
                                </div>
                                ${!notification.isRead ? '<div class="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>' : ''}
                            </div>
                        </div>
                    `;
                }).join('');
            }

            getTimeAgo(timestamp) {
                const now = new Date();
                const time = new Date(timestamp);
                const diffInSeconds = Math.floor((now - time) / 1000);
                
                if (diffInSeconds < 60) return 'Just now';
                if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
                if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
                return `${Math.floor(diffInSeconds / 86400)}d ago`;
            }

            markAsRead(notificationId) {
                const notification = this.notifications.find(n => n.id === notificationId);
                if (notification && !notification.isRead) {
                    notification.isRead = true;
                    this.saveNotifications();
                    this.updateNotificationBadge();
                    this.renderNotifications();
                }
            }

            markAllAsRead() {
                this.notifications.forEach(n => n.isRead = true);
                this.saveNotifications();
                this.updateNotificationBadge();
                this.renderNotifications();
            }

            addNotification(notification) {
                const newNotification = {
                    id: 'notif_' + Date.now(),
                    timestamp: new Date().toISOString(),
                    isRead: false,
                    ...notification
                };
                
                this.notifications.unshift(newNotification);
                
                // Keep only last 50 notifications
                if (this.notifications.length > 50) {
                    this.notifications = this.notifications.slice(0, 50);
                }
                
                this.saveNotifications();
                this.updateNotificationBadge();
                this.renderNotifications();
                
                // Show browser notification if permission granted
                this.showBrowserNotification(newNotification);
            }

            showBrowserNotification(notification) {
                if (Notification.permission === 'granted') {
                    new Notification('LearnStagram', {
                        body: notification.message,
                        icon: '/favicon.ico'
                    });
                }
            }

            startLiveUpdates() {
                // Simulate receiving new notifications every 30 seconds
                setInterval(() => {
                    if (Math.random() < 0.3) { // 30% chance
                        this.simulateNewNotification();
                    }
                }, 30000);
                
                // Update timestamps every minute
                setInterval(() => {
                    this.renderNotifications();
                }, 60000);
            }

            simulateNewNotification() {
                const types = ['like', 'comment', 'follow', 'mention'];
                const type = types[Math.floor(Math.random() * types.length)];
                
                const notifications = {
                    'like': {
                        type: 'like',
                        title: 'Someone liked your post',
                        message: 'Your professional insight received positive feedback',
                        avatar: 'PR',
                        avatarColor: 'bg-blue-600'
                    },
                    'comment': {
                        type: 'comment',
                        title: 'New comment on your post',
                        message: 'A professional shared their thoughts on your content',
                        avatar: 'CM',
                        avatarColor: 'bg-blue-700'
                    },
                    'follow': {
                        type: 'follow',
                        title: 'New follower',
                        message: 'Someone started following your professional updates',
                        avatar: 'NF',
                        avatarColor: 'bg-blue-800'
                    },
                    'mention': {
                        type: 'mention',
                        title: 'You were mentioned',
                        message: 'A colleague mentioned you in a professional discussion',
                        avatar: 'MT',
                        avatarColor: 'bg-blue-600'
                    }
                };
                
                this.addNotification(notifications[type]);
            }
        }

        // Initialize User Manager
        const userManager = new UserManager();
        
        // Initialize Notification Manager
        const notificationManager = new NotificationManager();

        // UI State Management
        let isLoginMode = true;

        function switchTab(mode) {
            isLoginMode = mode === 'login';
            
            const loginTab = document.getElementById('loginTab');
            const registerTab = document.getElementById('registerTab');
            const nameField = document.getElementById('nameField');
            const roleField = document.getElementById('roleField');
            const rememberField = document.getElementById('rememberField');
            const demoSection = document.getElementById('demoSection');
            const submitBtnText = document.getElementById('submitBtnText');
            const loadingText = document.getElementById('loadingText');
            
            if (isLoginMode) {
                loginTab.className = 'flex-1 py-3 px-4 rounded-lg text-sm font-semibold transition-all bg-white text-blue-800 shadow-sm';
                registerTab.className = 'flex-1 py-3 px-4 rounded-lg text-sm font-semibold transition-all text-slate-600 hover:text-blue-800';
                nameField.classList.add('hidden');
                roleField.classList.add('hidden');
                rememberField.classList.remove('hidden');
                demoSection.classList.remove('hidden');
                submitBtnText.textContent = 'Sign In';
                loadingText.textContent = 'Signing in...';
            } else {
                registerTab.className = 'flex-1 py-3 px-4 rounded-lg text-sm font-semibold transition-all bg-white text-blue-800 shadow-sm';
                loginTab.className = 'flex-1 py-3 px-4 rounded-lg text-sm font-semibold transition-all text-slate-600 hover:text-blue-800';
                nameField.classList.remove('hidden');
                roleField.classList.remove('hidden');
                rememberField.classList.add('hidden');
                demoSection.classList.add('hidden');
                submitBtnText.textContent = 'Create Account';
                loadingText.textContent = 'Creating account...';
            }
            
            hideMessages();
            document.getElementById('loginForm').reset();
        }

        function selectRole(radio) {
            // Remove selection from all role options
            document.querySelectorAll('input[name="role"]').forEach(input => {
                input.parentElement.classList.remove('border-blue-500', 'bg-blue-50');
            });
            
            // Add selection to chosen role
            radio.parentElement.classList.add('border-blue-500', 'bg-blue-50');
        }

        function togglePassword() {
            const passwordInput = document.getElementById('password');
            const toggleIcon = document.getElementById('passwordToggle');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleIcon.textContent = 'üôà';
            } else {
                passwordInput.type = 'password';
                toggleIcon.textContent = 'üëÅÔ∏è';
            }
        }

        function fillDemoCredentials(role) {
            const emailInput = document.getElementById('email');
            const passwordInput = document.getElementById('password');
            
            switch(role) {
                case 'student':
                    emailInput.value = 'student@demo.com';
                    passwordInput.value = 'demo123';
                    break;
                case 'teacher':
                    emailInput.value = 'teacher@demo.com';
                    passwordInput.value = 'demo123';
                    break;
                case 'admin':
                    emailInput.value = 'admin@demo.com';
                    passwordInput.value = 'demo123';
                    break;
            }
        }

        function showMessage(type, message) {
            const successMsg = document.getElementById('successMessage');
            const errorMsg = document.getElementById('errorMessage');
            
            if (type === 'success') {
                successMsg.classList.remove('hidden');
                errorMsg.classList.add('hidden');
                document.getElementById('successText').textContent = message;
            } else {
                errorMsg.classList.remove('hidden');
                successMsg.classList.add('hidden');
                document.getElementById('errorText').textContent = message;
            }
        }

        function hideMessages() {
            document.getElementById('successMessage').classList.add('hidden');
            document.getElementById('errorMessage').classList.add('hidden');
        }

        function showLoading(show) {
            const submitBtn = document.getElementById('submitBtn');
            const submitBtnText = document.getElementById('submitBtnText');
            const submitSpinner = document.getElementById('submitSpinner');
            
            if (show) {
                submitBtn.disabled = true;
                submitBtnText.classList.add('hidden');
                submitSpinner.classList.remove('hidden');
            } else {
                submitBtn.disabled = false;
                submitBtnText.classList.remove('hidden');
                submitSpinner.classList.add('hidden');
            }
        }

        function toggleUserMenu() {
            const userMenu = document.getElementById('userMenu');
            userMenu.classList.toggle('hidden');
        }

        function logout() {
            userManager.logout();
            userManager.showLogin();
            document.getElementById('userMenu').classList.add('hidden');
            document.getElementById('loginForm').reset();
            hideMessages();
        }

        function showProfile() {
            alert('Profile page would open here. This is a demo.');
            document.getElementById('userMenu').classList.add('hidden');
        }

        function showSettings() {
            alert('Settings page would open here. This is a demo.');
            document.getElementById('userMenu').classList.add('hidden');
        }

        // Form submission handler
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value;
            
            if (!email || !password) {
                showMessage('error', 'Please fill in all required fields.');
                return;
            }
            
            hideMessages();
            showLoading(true);
            
            // Simulate API call delay
            setTimeout(() => {
                showLoading(false);
                
                try {
                    if (isLoginMode) {
                        // Login
                        const user = userManager.login(email, password);
                        showMessage('success', `Welcome back, ${user.name}! Redirecting...`);
                        
                        setTimeout(() => {
                            userManager.showApp();
                        }, 1500);
                    } else {
                        // Register
                        const name = document.getElementById('fullName').value.trim();
                        const roleInputs = document.querySelectorAll('input[name="role"]');
                        let selectedRole = null;
                        
                        roleInputs.forEach(input => {
                            if (input.checked) selectedRole = input.value;
                        });
                        
                        if (!name) {
                            showMessage('error', 'Please enter your full name.');
                            return;
                        }
                        
                        if (!selectedRole) {
                            showMessage('error', 'Please select your role.');
                            return;
                        }
                        
                        if (password.length < 6) {
                            showMessage('error', 'Password must be at least 6 characters long.');
                            return;
                        }
                        
                        const user = userManager.register({
                            email: email,
                            password: password,
                            name: name,
                            role: selectedRole
                        });
                        
                        showMessage('success', `Account created successfully! Welcome, ${user.name}!`);
                        
                        setTimeout(() => {
                            userManager.showApp();
                        }, 1500);
                    }
                } catch (error) {
                    showMessage('error', error.message);
                }
            }, 1000);
        });

        // Close user menu when clicking outside
        document.addEventListener('click', function(e) {
            const userMenu = document.getElementById('userMenu');
            const userAvatar = document.getElementById('userAvatar');
            
            if (!userMenu.contains(e.target) && !userAvatar.contains(e.target)) {
                userMenu.classList.add('hidden');
            }
        });

        // Hide messages when user starts typing
        document.getElementById('email').addEventListener('input', hideMessages);
        document.getElementById('password').addEventListener('input', hideMessages);

        // Post interaction functions (simplified for demo)
        let postsData = {
            'post-1': { likes: 247, isLiked: false, isBookmarked: false, comments: [] }
        };

        function toggleLike(button) {
            const post = button.closest('article');
            const postId = post.dataset.postId;
            const count = button.querySelector('.like-count');
            
            const postData = postsData[postId];
            
            if (!postData.isLiked) {
                postData.likes += 1;
                postData.isLiked = true;
                button.classList.add('text-red-500');
            } else {
                postData.likes -= 1;
                postData.isLiked = false;
                button.classList.remove('text-red-500');
            }
            
            count.textContent = postData.likes;
        }

        function toggleBookmark(button) {
            const post = button.closest('article');
            const postId = post.dataset.postId;
            
            const postData = postsData[postId];
            
            if (!postData.isBookmarked) {
                postData.isBookmarked = true;
                button.classList.add('text-blue-500');
            } else {
                postData.isBookmarked = false;
                button.classList.remove('text-blue-500');
            }
        }

        function toggleComments(button) {
            const post = button.closest('article');
            const commentsSection = post.querySelector('.comments-expanded');
            
            if (commentsSection.classList.contains('hidden')) {
                commentsSection.classList.remove('hidden');
                button.classList.add('text-blue-600');
            } else {
                commentsSection.classList.add('hidden');
                button.classList.remove('text-blue-600');
            }
        }

        function submitComment(button) {
            const input = button.previousElementSibling;
            const commentText = input.value.trim();
            
            if (!commentText) return;
            
            // Add comment logic here
            input.value = '';
            alert('Professional comment posted! (Demo functionality)');
        }

        function openCreatePost() {
            alert('Create professional post modal would open here. This is a demo.');
        }

        // Notification Functions
        function toggleNotifications() {
            const panel = document.getElementById('notificationsPanel');
            const userMenu = document.getElementById('userMenu');
            
            // Close user menu if open
            userMenu.classList.add('hidden');
            
            panel.classList.toggle('hidden');
        }

        function markAsRead(notificationId) {
            notificationManager.markAsRead(notificationId);
        }

        function markAllAsRead() {
            notificationManager.markAllAsRead();
        }

        // Request notification permission on app load
        function requestNotificationPermission() {
            if ('Notification' in window && Notification.permission === 'default') {
                Notification.requestPermission();
            }
        }

        // Close notifications panel when clicking outside
        document.addEventListener('click', function(e) {
            const notificationsPanel = document.getElementById('notificationsPanel');
            const notificationButton = e.target.closest('button[onclick="toggleNotifications()"]');
            
            if (!notificationsPanel.contains(e.target) && !notificationButton) {
                notificationsPanel.classList.add('hidden');
            }
        });

        // Request notification permission when app loads
        setTimeout(requestNotificationPermission, 2000);
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9755451417408135',t:'MTc1NjIzMTY1OC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
